#!/bin/bash

DEBUG=false
VERSION=2.0.0

SSHKEYPATH=$HOME/.ssh
SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")
PLUGINPATH=$SCRIPTPATH/plugins

####################################################
# Functions
####################################################

# Echo debug content if debug is enabled
function debug {

	if [ $DEBUG == "true" ]; then
		message "DEBUG" "${1}" 
	fi
}

# Echo message with time prefixed
function message {
	
	TIMESTAMP=`date "+%H:%M:%S"`
	
	echo "[$TIMESTAMP] ${1} - ${2}"
} 

# Check certain commands are installed
function checkCommands {

	debug "Running command checks."

	if ! [ -x "$(command -v docker)" ]; then
		message "ERROR" "Docker is not installed. Exiting..."
		exit 1
	else
		debug "Confirmed Docker is installed."
	fi
	
	if ! [ -x "$(command -v git)" ]; then
		message "ERROR" "Git is not installed. Exiting..."
		exit 1
	else
		debug "Confirmed Git is installed."
	fi
	
	debug "Finished running command checks."
}

# Ask Y/N Question and loop until valid response
function ask {

    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        echo -n "$1 [$prompt]:"

        read reply </dev/tty

        if [ -z "$reply" ]; then
            reply=$default
        fi

        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

# Echo help content
function helpRun {
	
	echo "
Usage: eiger [COMMAND] [ARG...]
	
Run a command that runs in a docker container

Commands:"

for PLUGIN in "${PLUGINS[@]}"
do
	# Loop through all the commands the plugin has
	for c in $(eval echo "$"${PLUGIN}_COMMAND)
	do
		echo "  $c        $(eval echo "$"${PLUGIN}_HELP)"
	done
done
  
}

debug "Functions loaded"

####################################################
# Load Plugins
####################################################

I=0
PLUGINS=()

for PLUGINNAME in $(find "$PLUGINPATH" -maxdepth 1 -mindepth 1 -type d -printf '%f\n')
do
	if [ -f "$PLUGINPATH/$PLUGINNAME/$PLUGINNAME" ]; then
		source "$PLUGINPATH/$PLUGINNAME/$PLUGINNAME"
		
		PLUGINS[$I]=$(echo $PLUGINNAME | tr /a-z/ /A-Z/)
	
		I=$I+1
		debug "Plugin $PLUGINNAME loaded"
	else 
		debug "$PLUGINNAME is not a valid plugin, Skipping.."
	fi
done

####################################################
# Load Project Configs
####################################################

if [ -f "$(pwd)/.eiger" ]; then
	source $(pwd)/.eiger
else
	message "WARNING" "No config found, using defaults."
fi

####################################################
# Setting OS Default Configs
####################################################

PATH_PREFIX=
COMMAND_PREFIX=
USER=$(id -u)
GROUP=$(id -g)
RUN_AS="--user $USER:$GROUP"

####################################################
# Main Entry Point
####################################################

checkCommands

# Linux* = Linux
# Darwin* = Mac
# CYGWIN* = Cygwin (Windows)
# MINGW* = MinGw (Windows)

unameOut="$(uname -s)"

debug "Machine type ${unameOut}"

case "${unameOut}" in
    Linux*|Darwin*)     
		debug "Defining variables for linux."
		OS_TYPE=Linux
		;;
    CYGWIN*|MINGW*)    
		debug "Defining variables for windows."
		
		OS_TYPE=Windows
		USER="www-data"
		GROUP="www-data"
		COMMAND_PREFIX="winpty"
		PATH_PREFIX=/
		RUN_AS=
		;;
    *)          
		message "ERROR" "Unknown machine type ${unameOut}. Exiting..."
		exit 1
		;;
esac

case $1 in 
	help|-h|--help)
		helpRun
		exit 1
		;;
	update|self-update)
		debug "Running update, command ${@}"
		message "INFO" "Please run `eiger-update` instead."
		;;
	version)
		debug "Running version, command ${@}"
		message "INFO" "Script version: $VERSION"
		exit 1
		;;
esac

# Loop through each plugin to search if one has the command being run
for PLUGIN in "${PLUGINS[@]}"
do
	# Loop through all the commands the plugin has
	for c in $(eval echo "$"${PLUGIN}_COMMAND)
	do
		# Check if the command matches
		if [ $c = $1 ]; then
			debug "Running $PLUGIN, command ${@}"
			
			# Run the function
			$(eval echo "$"${PLUGIN}_FUNCTION) $@
			exit 1
		fi
	done
done

message "ERROR" "Command not found. Exiting..."
